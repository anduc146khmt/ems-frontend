{"ast":null,"code":"var _jsxFileName = \"/home/ducan1406/Documents/kiran_EMS/Online-Examination-System/frontend/src/components/admin/newTrainer/newtrainer.js\";\nimport React, { Component } from 'react';\nimport './newtrainer.css';\nimport { Form, Input, Button, Select } from 'antd';\nimport { SecurePost } from '../../../services/axiosCall';\nimport apis from '../../../services/Apis';\nimport { connect } from 'react-redux';\nimport { ChangeTrainerConfirmDirty, ChangeTrainerModalState, ChangeTrainerTableData } from '../../../actions/adminAction';\nimport Alert from '../../../components/common/alert';\nconst Option = Select.Option;\n\nclass NewTrainer extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('passwords are not same !');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.props.admin.TrainerconfirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Received values of form: ', values);\n          SecurePost({\n            url: \"\".concat(apis.CREATE_TRAINER),\n            data: {\n              _id: this.props.admin.trainerId,\n              username: values.username,\n              name: values.name,\n              password: values.password,\n              emailid: values.emailid,\n              contact: values.prefix + values.contact\n            }\n          }).then(response => {\n            if (response.data.success) {\n              this.props.ChangeTrainerModalState(false, null, 'Register');\n              Alert('success', 'Success', response.data.message);\n              this.props.ChangeTrainerTableData();\n            } else {\n              console.log(response.data);\n              this.props.ChangeTrainerModalState(false, null, 'Register');\n              return Alert('warning', 'Warning!', response.data.message);\n            }\n          }).catch(error => {\n            this.props.ChangeTrainerModalState(false, null, 'Register');\n            return Alert('error', 'Error!', 'Server Error');\n          });\n        }\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: this.props.admin.trainerdetails.prefix || '+91',\n      rules: [{\n        required: true,\n        message: 'Please enter contact no prefix'\n      }]\n    })(React.createElement(Select, {\n      style: {\n        width: 70\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"+91\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"+91\")));\n    return React.createElement(\"div\", {\n      className: \"register-trainer-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"register-trainer-form-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"Name\",\n      hasFeedback: true,\n      className: \"input-admin-trainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, getFieldDecorator('name', {\n      initialValue: this.props.admin.trainerdetails.name,\n      rules: [{\n        required: true,\n        message: 'Please input your name!',\n        whitespace: true\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }))), !this.props.admin.trainerId ? React.createElement(Form.Item, {\n      label: \"E-mail\",\n      hasFeedback: true,\n      className: \"input-admin-trainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, getFieldDecorator('emailid', {\n      initialValue: this.props.admin.trainerdetails.emailid,\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }))) : null, React.createElement(Form.Item, {\n      label: \"Phone Number\",\n      className: \"input-admin-trainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, getFieldDecorator('contact', {\n      initialValue: this.props.admin.trainerdetails.contact,\n      rules: [{\n        required: true,\n        message: 'Please input your phone number!'\n      }, {\n        len: 10,\n        message: 'Contact number must be 10 digit long'\n      }]\n    })(React.createElement(Input, {\n      addonBefore: prefixSelector,\n      min: 10,\n      max: 10,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Username\",\n      hasFeedback: true,\n      className: \"input-admin-trainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, getFieldDecorator('username', {\n      initialValue: this.props.admin.trainerdetails.name,\n      rules: [{\n        required: true,\n        message: 'Please input your username!',\n        whitespace: true\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }))), !this.props.admin.trainerId ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"Password\",\n      hasFeedback: true,\n      className: \"input-admin-trainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      initialValue: this.props.admin.trainerdetails.password,\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      className: \"input-admin-trainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      initialValue: this.props.admin.trainerdetails.confirmpassword,\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    })))) : null, React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      block: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, this.props.admin.Trainermode)))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  admin: state.admin\n});\n\nconst NewTrainerForm = Form.create({\n  name: 'register'\n})(NewTrainer);\nexport default connect(mapStateToProps, {\n  ChangeTrainerConfirmDirty,\n  ChangeTrainerModalState,\n  ChangeTrainerTableData\n})(NewTrainerForm);","map":{"version":3,"sources":["/home/ducan1406/Documents/kiran_EMS/Online-Examination-System/frontend/src/components/admin/newTrainer/newtrainer.js"],"names":["React","Component","Form","Input","Button","Select","SecurePost","apis","connect","ChangeTrainerConfirmDirty","ChangeTrainerModalState","ChangeTrainerTableData","Alert","Option","NewTrainer","compareToFirstPassword","rule","value","callback","form","props","getFieldValue","validateToNextPassword","admin","TrainerconfirmDirty","validateFields","force","handleSubmit","e","preventDefault","validateFieldsAndScroll","err","values","console","log","url","CREATE_TRAINER","data","_id","trainerId","username","name","password","emailid","contact","prefix","then","response","success","message","catch","error","render","getFieldDecorator","prefixSelector","initialValue","trainerdetails","rules","required","width","whitespace","type","len","validator","confirmpassword","handleConfirmBlur","Trainermode","mapStateToProps","state","NewTrainerForm","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './newtrainer.css';\r\nimport { Form, Input, Button, Select } from 'antd';\r\nimport { SecurePost } from '../../../services/axiosCall';\r\nimport apis from '../../../services/Apis';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  ChangeTrainerConfirmDirty,\r\n  ChangeTrainerModalState,\r\n  ChangeTrainerTableData,\r\n} from '../../../actions/adminAction';\r\nimport Alert from '../../../components/common/alert';\r\nconst { Option } = Select;\r\nclass NewTrainer extends Component {\r\n  compareToFirstPassword = (rule, value, callback) => {\r\n    const form = this.props.form;\r\n    if (value && value !== form.getFieldValue('password')) {\r\n      callback('passwords are not same !');\r\n    } else {\r\n      callback();\r\n    }\r\n  };\r\n\r\n  validateToNextPassword = (rule, value, callback) => {\r\n    const form = this.props.form;\r\n    if (value && this.props.admin.TrainerconfirmDirty) {\r\n      form.validateFields(['confirm'], { force: true });\r\n    }\r\n    callback();\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.form.validateFieldsAndScroll((err, values) => {\r\n      if (!err) {\r\n        console.log('Received values of form: ', values);\r\n\r\n        SecurePost({\r\n          url: `${apis.CREATE_TRAINER}`,\r\n          data: {\r\n            _id: this.props.admin.trainerId,\r\n            username: values.username,\r\n            name: values.name,\r\n            password: values.password,\r\n            emailid: values.emailid,\r\n            contact: values.prefix + values.contact,\r\n          },\r\n        })\r\n          .then((response) => {\r\n            if (response.data.success) {\r\n              this.props.ChangeTrainerModalState(false, null, 'Register');\r\n              Alert('success', 'Success', response.data.message);\r\n              this.props.ChangeTrainerTableData();\r\n            } else {\r\n              console.log(response.data);\r\n              this.props.ChangeTrainerModalState(false, null, 'Register');\r\n              return Alert('warning', 'Warning!', response.data.message);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            this.props.ChangeTrainerModalState(false, null, 'Register');\r\n            return Alert('error', 'Error!', 'Server Error');\r\n          });\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    const prefixSelector = getFieldDecorator('prefix', {\r\n      initialValue: this.props.admin.trainerdetails.prefix || '+91',\r\n      rules: [{ required: true, message: 'Please enter contact no prefix' }],\r\n    })(\r\n      <Select style={{ width: 70 }}>\r\n        <Option value=\"+91\">+91</Option>\r\n      </Select>\r\n    );\r\n    return (\r\n      <div className=\"register-trainer-form\">\r\n        <div className=\"register-trainer-form-body\">\r\n          <Form onSubmit={this.handleSubmit}>\r\n            <Form.Item label=\"Name\" hasFeedback className=\"input-admin-trainer\">\r\n              {getFieldDecorator('name', {\r\n                initialValue: this.props.admin.trainerdetails.name,\r\n                rules: [\r\n                  {\r\n                    required: true,\r\n                    message: 'Please input your name!',\r\n                    whitespace: true,\r\n                  },\r\n                ],\r\n              })(<Input />)}\r\n            </Form.Item>\r\n\r\n            {!this.props.admin.trainerId ? (\r\n              <Form.Item\r\n                label=\"E-mail\"\r\n                hasFeedback\r\n                className=\"input-admin-trainer\">\r\n                {getFieldDecorator('emailid', {\r\n                  initialValue: this.props.admin.trainerdetails.emailid,\r\n                  rules: [\r\n                    {\r\n                      type: 'email',\r\n                      message: 'The input is not valid E-mail!',\r\n                    },\r\n                    {\r\n                      required: true,\r\n                      message: 'Please input your E-mail!',\r\n                    },\r\n                  ],\r\n                })(<Input />)}\r\n              </Form.Item>\r\n            ) : null}\r\n\r\n            <Form.Item label=\"Phone Number\" className=\"input-admin-trainer\">\r\n              {getFieldDecorator('contact', {\r\n                initialValue: this.props.admin.trainerdetails.contact,\r\n                rules: [\r\n                  {\r\n                    required: true,\r\n                    message: 'Please input your phone number!',\r\n                  },\r\n                  {\r\n                    len: 10,\r\n                    message: 'Contact number must be 10 digit long',\r\n                  },\r\n                ],\r\n              })(<Input addonBefore={prefixSelector} min={10} max={10} />)}\r\n            </Form.Item>\r\n            <Form.Item\r\n              label=\"Username\"\r\n              hasFeedback\r\n              className=\"input-admin-trainer\">\r\n              {getFieldDecorator('username', {\r\n                initialValue: this.props.admin.trainerdetails.name,\r\n                rules: [\r\n                  {\r\n                    required: true,\r\n                    message: 'Please input your username!',\r\n                    whitespace: true,\r\n                  },\r\n                ],\r\n              })(<Input />)}\r\n            </Form.Item>\r\n            {!this.props.admin.trainerId ? (\r\n              <div>\r\n                <Form.Item\r\n                  label=\"Password\"\r\n                  hasFeedback\r\n                  className=\"input-admin-trainer\">\r\n                  {getFieldDecorator('password', {\r\n                    initialValue: this.props.admin.trainerdetails.password,\r\n                    rules: [\r\n                      {\r\n                        required: true,\r\n                        message: 'Please input your password!',\r\n                      },\r\n                      {\r\n                        validator: this.validateToNextPassword,\r\n                      },\r\n                    ],\r\n                  })(<Input.Password />)}\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                  label=\"Confirm Password\"\r\n                  hasFeedback\r\n                  className=\"input-admin-trainer\">\r\n                  {getFieldDecorator('confirm', {\r\n                    initialValue:\r\n                      this.props.admin.trainerdetails.confirmpassword,\r\n                    rules: [\r\n                      {\r\n                        required: true,\r\n                        message: 'Please confirm your password!',\r\n                      },\r\n                      {\r\n                        validator: this.compareToFirstPassword,\r\n                      },\r\n                    ],\r\n                  })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n                </Form.Item>\r\n              </div>\r\n            ) : null}\r\n            <Form.Item>\r\n              <Button type=\"primary\" htmlType=\"submit\" block>\r\n                {this.props.admin.Trainermode}\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  admin: state.admin,\r\n});\r\n\r\nconst NewTrainerForm = Form.create({ name: 'register' })(NewTrainer);\r\n\r\nexport default connect(mapStateToProps, {\r\n  ChangeTrainerConfirmDirty,\r\n  ChangeTrainerModalState,\r\n  ChangeTrainerTableData,\r\n})(NewTrainerForm);\r\n"]},"metadata":{},"sourceType":"module"}