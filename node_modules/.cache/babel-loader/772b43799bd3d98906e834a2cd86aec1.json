{"ast":null,"code":"var _jsxFileName = \"/home/ducan1406/Documents/kiran_EMS/Online-Examination-System/frontend/src/components/trainer/newtest/basicForm.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Form, InputNumber, Input, Button, Select } from 'antd';\nimport { changeStep, changeBasicNewTestDetails } from '../../../actions/testAction';\nimport { SecurePost } from '../../../services/axiosCall';\nimport './newtest.css';\nimport apis from '../../../services/Apis';\nconst Option = Select.Option;\n\nclass BasicTestFormO extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          console.log(values);\n          this.props.changeBasicNewTestDetails({\n            testType: values.type,\n            testTitle: values.title,\n            testDuration: values.duration,\n            OrganisationName: values.organisation,\n            testSubject: values.subjects\n          });\n          this.props.changeStep(1);\n        }\n      });\n    };\n\n    this.validateTestName = (rule, value, callback) => {\n      if (value.length >= 5) {\n        this.setState({\n          checkingName: 'validating'\n        });\n        SecurePost({\n          url: apis.CHECK_TEST_NAME,\n          data: {\n            testname: value\n          }\n        }).then(data => {\n          console.log(data);\n\n          if (data.data.success) {\n            if (data.data.can_use) {\n              this.setState({\n                checkingName: 'success'\n              });\n              callback();\n            } else {\n              this.setState({\n                checkingName: 'error'\n              });\n              callback('Another test exist with same name.');\n            }\n          } else {\n            this.setState({\n              checkingName: 'success'\n            });\n            callback();\n          }\n        }).catch(ee => {\n          console.log(ee);\n          this.setState({\n            checkingName: 'success'\n          });\n          callback();\n        });\n      } else {\n        callback();\n      }\n    };\n\n    this.state = {\n      checkingName: ''\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(\"div\", {\n      className: \"basic-test-form-outer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"basic-test-form-inner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"Test Type\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, getFieldDecorator('type', {\n      initialValue: this.props.test.newtestFormData.testType,\n      rules: [{\n        required: true,\n        message: 'Please select a test type'\n      }]\n    })(React.createElement(Select, {\n      placeholder: \"Test Type\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"pre-test\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Pre Test\"), React.createElement(Option, {\n      value: \"post-test\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Post Test\")))), React.createElement(Form.Item, {\n      label: \"Test Title\",\n      hasFeedback: true,\n      validateStatus: this.state.checkingName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, getFieldDecorator('title', {\n      initialValue: this.props.test.newtestFormData.testTitle,\n      rules: [{\n        required: true,\n        message: 'Please give the test title'\n      }, {\n        min: 5,\n        message: 'Title should be atleast 5 character long'\n      }, {\n        validator: this.validateTestName\n      }]\n    })(React.createElement(Input, {\n      placeholder: \"Test Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Subjects\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, getFieldDecorator('subjects', {\n      initialValue: this.props.test.newtestFormData.testSubject,\n      rules: [{\n        required: true,\n        message: 'Please select a test type'\n      }]\n    })(React.createElement(Select, {\n      mode: \"multiple\",\n      placeholder: \"Select one or more subjects\",\n      style: {\n        width: '100%'\n      },\n      allowClear: true,\n      optionFilterProp: \"s\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, this.props.admin.subjectTableData.map(item => React.createElement(Select.Option, {\n      key: item._id,\n      value: item._id,\n      s: item.topic,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, item.topic))))), React.createElement(Form.Item, {\n      label: \"Test Duration ( Min. test duration-60m )\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, getFieldDecorator('duration', {\n      initialValue: this.props.test.newtestFormData.testDuration,\n      rules: [{\n        required: true,\n        message: 'Please give test duration'\n      }]\n    })(React.createElement(InputNumber, {\n      style: {\n        width: '100%'\n      },\n      placeholder: \"Test Duration\",\n      min: 60,\n      max: 180,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Organisation Name\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, getFieldDecorator('organisation', {\n      initialValue: this.props.test.newtestFormData.OrganisationName\n    })(React.createElement(Input, {\n      placeholder: \"Organisation Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      block: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Next\")))));\n  }\n\n}\n\nconst BasicTestForm = Form.create({\n  name: 'Basic Form'\n})(BasicTestFormO);\n\nconst mapStateToProps = state => ({\n  test: state.test,\n  admin: state.admin\n});\n\nexport default connect(mapStateToProps, {\n  changeStep,\n  changeBasicNewTestDetails\n})(BasicTestForm);","map":{"version":3,"sources":["/home/ducan1406/Documents/kiran_EMS/Online-Examination-System/frontend/src/components/trainer/newtest/basicForm.js"],"names":["React","Component","connect","Form","InputNumber","Input","Button","Select","changeStep","changeBasicNewTestDetails","SecurePost","apis","Option","BasicTestFormO","constructor","props","handleSubmit","e","preventDefault","form","validateFields","err","values","console","log","testType","type","testTitle","title","testDuration","duration","OrganisationName","organisation","testSubject","subjects","validateTestName","rule","value","callback","length","setState","checkingName","url","CHECK_TEST_NAME","data","testname","then","success","can_use","catch","ee","state","render","getFieldDecorator","initialValue","test","newtestFormData","rules","required","message","min","validator","width","admin","subjectTableData","map","item","_id","topic","BasicTestForm","create","name","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Form, InputNumber, Input, Button, Select } from 'antd';\r\nimport {\r\n  changeStep,\r\n  changeBasicNewTestDetails,\r\n} from '../../../actions/testAction';\r\nimport { SecurePost } from '../../../services/axiosCall';\r\nimport './newtest.css';\r\nimport apis from '../../../services/Apis';\r\nconst { Option } = Select;\r\n\r\nclass BasicTestFormO extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      checkingName: '',\r\n    };\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        console.log(values);\r\n        this.props.changeBasicNewTestDetails({\r\n          testType: values.type,\r\n          testTitle: values.title,\r\n          testDuration: values.duration,\r\n          OrganisationName: values.organisation,\r\n          testSubject: values.subjects,\r\n        });\r\n        this.props.changeStep(1);\r\n      }\r\n    });\r\n  };\r\n\r\n  validateTestName = (rule, value, callback) => {\r\n    if (value.length >= 5) {\r\n      this.setState({\r\n        checkingName: 'validating',\r\n      });\r\n      SecurePost({\r\n        url: apis.CHECK_TEST_NAME,\r\n        data: {\r\n          testname: value,\r\n        },\r\n      })\r\n        .then((data) => {\r\n          console.log(data);\r\n          if (data.data.success) {\r\n            if (data.data.can_use) {\r\n              this.setState({\r\n                checkingName: 'success',\r\n              });\r\n              callback();\r\n            } else {\r\n              this.setState({\r\n                checkingName: 'error',\r\n              });\r\n              callback('Another test exist with same name.');\r\n            }\r\n          } else {\r\n            this.setState({\r\n              checkingName: 'success',\r\n            });\r\n            callback();\r\n          }\r\n        })\r\n        .catch((ee) => {\r\n          console.log(ee);\r\n          this.setState({\r\n            checkingName: 'success',\r\n          });\r\n          callback();\r\n        });\r\n    } else {\r\n      callback();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    return (\r\n      <div className=\"basic-test-form-outer\">\r\n        <div className=\"basic-test-form-inner\">\r\n          <Form onSubmit={this.handleSubmit}>\r\n            <Form.Item label=\"Test Type\" hasFeedback>\r\n              {getFieldDecorator('type', {\r\n                initialValue: this.props.test.newtestFormData.testType,\r\n                rules: [\r\n                  { required: true, message: 'Please select a test type' },\r\n                ],\r\n              })(\r\n                <Select placeholder=\"Test Type\">\r\n                  <Option value=\"pre-test\">Pre Test</Option>\r\n                  <Option value=\"post-test\">Post Test</Option>\r\n                </Select>\r\n              )}\r\n            </Form.Item>\r\n            <Form.Item\r\n              label=\"Test Title\"\r\n              hasFeedback\r\n              validateStatus={this.state.checkingName}>\r\n              {getFieldDecorator('title', {\r\n                initialValue: this.props.test.newtestFormData.testTitle,\r\n                rules: [\r\n                  { required: true, message: 'Please give the test title' },\r\n                  {\r\n                    min: 5,\r\n                    message: 'Title should be atleast 5 character long',\r\n                  },\r\n                  { validator: this.validateTestName },\r\n                ],\r\n              })(<Input placeholder=\"Test Title\" />)}\r\n            </Form.Item>\r\n            <Form.Item label=\"Subjects\" hasFeedback>\r\n              {getFieldDecorator('subjects', {\r\n                initialValue: this.props.test.newtestFormData.testSubject,\r\n                rules: [\r\n                  { required: true, message: 'Please select a test type' },\r\n                ],\r\n              })(\r\n                <Select\r\n                  mode=\"multiple\"\r\n                  placeholder=\"Select one or more subjects\"\r\n                  style={{ width: '100%' }}\r\n                  allowClear={true}\r\n                  optionFilterProp=\"s\">\r\n                  {this.props.admin.subjectTableData.map((item) => (\r\n                    <Select.Option\r\n                      key={item._id}\r\n                      value={item._id}\r\n                      s={item.topic}>\r\n                      {item.topic}\r\n                    </Select.Option>\r\n                  ))}\r\n                </Select>\r\n              )}\r\n            </Form.Item>\r\n            <Form.Item\r\n              label=\"Test Duration ( Min. test duration-60m )\"\r\n              hasFeedback>\r\n              {getFieldDecorator('duration', {\r\n                initialValue: this.props.test.newtestFormData.testDuration,\r\n                rules: [\r\n                  { required: true, message: 'Please give test duration' },\r\n                ],\r\n              })(\r\n                <InputNumber\r\n                  style={{ width: '100%' }}\r\n                  placeholder=\"Test Duration\"\r\n                  min={60}\r\n                  max={180}\r\n                />\r\n              )}\r\n            </Form.Item>\r\n            <Form.Item label=\"Organisation Name\" hasFeedback>\r\n              {getFieldDecorator('organisation', {\r\n                initialValue: this.props.test.newtestFormData.OrganisationName,\r\n              })(<Input placeholder=\"Organisation Name\" />)}\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Button type=\"primary\" htmlType=\"submit\" block>\r\n                Next\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst BasicTestForm = Form.create({ name: 'Basic Form' })(BasicTestFormO);\r\n\r\nconst mapStateToProps = (state) => ({\r\n  test: state.test,\r\n  admin: state.admin,\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  changeStep,\r\n  changeBasicNewTestDetails,\r\n})(BasicTestForm);\r\n"]},"metadata":{},"sourceType":"module"}