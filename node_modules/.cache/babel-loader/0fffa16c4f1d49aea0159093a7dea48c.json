{"ast":null,"code":"var _jsxFileName = \"/home/ducan1406/Documents/kiran_EMS/Online-Examination-System/frontend/src/components/trainee/examPortal/operations.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Badge, Icon, Button, Row, Col } from 'antd';\nimport './portal.css';\nimport { switchQuestion } from '../../../actions/traineeAction';\n\nclass Operations extends Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"question-list-wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"question-list-inner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11\n      },\n      __self: this\n    }, React.createElement(Row, {\n      style: {\n        padding: '5px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, this.props.trainee.answers.map((d, i) => {\n      return React.createElement(Col, {\n        key: i,\n        span: 6,\n        style: {\n          padding: '10px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, React.createElement(Mark, {\n        qid: d.questionid,\n        ans: d.isAnswered,\n        mark: d.isMarked,\n        no: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }));\n    }))));\n  }\n\n}\n\nfunction mark(props) {\n  if (props.mark) {\n    if (props.ans) {\n      return React.createElement(Badge, {\n        className: \"qb\",\n        count: React.createElement(Icon, {\n          type: \"flag\",\n          theme: \"filled\",\n          style: {\n            color: '#f5222d'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: () => props.switchQuestion(props.no),\n        style: {\n          background: '#0B6623',\n          color: '#fff'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, props.no + 1));\n    } else {\n      return React.createElement(Badge, {\n        className: \"qb\",\n        count: React.createElement(Icon, {\n          type: \"flag\",\n          theme: \"filled\",\n          style: {\n            color: '#f5222d'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: () => props.switchQuestion(props.no),\n        style: {\n          background: '#999999',\n          color: '#fff'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, props.no + 1));\n    }\n  } else {\n    if (props.ans) {\n      return React.createElement(Button, {\n        onClick: () => props.switchQuestion(props.no),\n        className: \"qb\",\n        style: {\n          background: '#0B6623',\n          color: '#fff'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, props.no + 1);\n    } else {\n      return React.createElement(Button, {\n        onClick: () => props.switchQuestion(props.no),\n        className: \"qb\",\n        style: {\n          background: '#999999',\n          color: '#fff'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, props.no + 1);\n    }\n  }\n}\n\nconst mapStateToProps = state => ({\n  trainee: state.trainee\n});\n\nlet Mark = connect(mapStateToProps, {\n  switchQuestion\n})(mark);\nexport default connect(mapStateToProps, null)(Operations);","map":{"version":3,"sources":["/home/ducan1406/Documents/kiran_EMS/Online-Examination-System/frontend/src/components/trainee/examPortal/operations.js"],"names":["React","Component","connect","Badge","Icon","Button","Row","Col","switchQuestion","Operations","render","padding","props","trainee","answers","map","d","i","questionid","isAnswered","isMarked","mark","ans","color","no","background","mapStateToProps","state","Mark"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Badge, Icon, Button, Row, Col } from 'antd';\r\nimport './portal.css';\r\nimport { switchQuestion } from '../../../actions/traineeAction';\r\n\r\nclass Operations extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"question-list-wrapper\">\r\n        <div className=\"question-list-inner\">\r\n          <Row style={{ padding: '5px' }}>\r\n            {this.props.trainee.answers.map((d, i) => {\r\n              return (\r\n                <Col key={i} span={6} style={{ padding: '10px' }}>\r\n                  <Mark\r\n                    qid={d.questionid}\r\n                    ans={d.isAnswered}\r\n                    mark={d.isMarked}\r\n                    no={i}\r\n                  />\r\n                </Col>\r\n              );\r\n            })}\r\n          </Row>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mark(props) {\r\n  if (props.mark) {\r\n    if (props.ans) {\r\n      return (\r\n        <Badge\r\n          className=\"qb\"\r\n          count={\r\n            <Icon type=\"flag\" theme=\"filled\" style={{ color: '#f5222d' }} />\r\n          }>\r\n          <Button\r\n            onClick={() => props.switchQuestion(props.no)}\r\n            style={{ background: '#0B6623', color: '#fff' }}>\r\n            {props.no + 1}\r\n          </Button>\r\n        </Badge>\r\n      );\r\n    } else {\r\n      return (\r\n        <Badge\r\n          className=\"qb\"\r\n          count={\r\n            <Icon type=\"flag\" theme=\"filled\" style={{ color: '#f5222d' }} />\r\n          }>\r\n          <Button\r\n            onClick={() => props.switchQuestion(props.no)}\r\n            style={{ background: '#999999', color: '#fff' }}>\r\n            {props.no + 1}\r\n          </Button>\r\n        </Badge>\r\n      );\r\n    }\r\n  } else {\r\n    if (props.ans) {\r\n      return (\r\n        <Button\r\n          onClick={() => props.switchQuestion(props.no)}\r\n          className=\"qb\"\r\n          style={{ background: '#0B6623', color: '#fff' }}>\r\n          {props.no + 1}\r\n        </Button>\r\n      );\r\n    } else {\r\n      return (\r\n        <Button\r\n          onClick={() => props.switchQuestion(props.no)}\r\n          className=\"qb\"\r\n          style={{ background: '#999999', color: '#fff' }}>\r\n          {props.no + 1}\r\n        </Button>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  trainee: state.trainee,\r\n});\r\n\r\nlet Mark = connect(mapStateToProps, {\r\n  switchQuestion,\r\n})(mark);\r\n\r\nexport default connect(mapStateToProps, null)(Operations);\r\n"]},"metadata":{},"sourceType":"module"}